<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="namespacem0st4fa_1_1lexana" kind="namespace" language="C++">
    <compoundname>m0st4fa::lexana</compoundname>
    <innerclass refid="classm0st4fa_1_1lexana_1_1_lexical_analyzer" prot="public">m0st4fa::lexana::LexicalAnalyzer</innerclass>
    <innerclass refid="structm0st4fa_1_1lexana_1_1_lexical_analyzer_result" prot="public">m0st4fa::lexana::LexicalAnalyzerResult</innerclass>
    <innerclass refid="structm0st4fa_1_1lexana_1_1_position" prot="public">m0st4fa::lexana::Position</innerclass>
    <innerclass refid="structm0st4fa_1_1lexana_1_1_token" prot="public">m0st4fa::lexana::Token</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacem0st4fa_1_1lexana_1a9a9d1a058e5b31ba3d8a79f0646cc1eb" prot="public" static="no" strong="no">
        <type></type>
        <name>LA_FLAG</name>
        <qualifiedname>m0st4fa::lexana::LA_FLAG</qualifiedname>
        <enumvalue id="namespacem0st4fa_1_1lexana_1a9a9d1a058e5b31ba3d8a79f0646cc1ebaab8aaebf0f3608778869710b280d147d" prot="public">
          <name>LAF_DEFAULT</name>
          <initializer>= 0b0000</initializer>
          <briefdescription>
<para>Default behavior. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacem0st4fa_1_1lexana_1a9a9d1a058e5b31ba3d8a79f0646cc1ebaf1230dc0b95964fc998150653b2eb59d" prot="public">
          <name>LAF_ALLOW_WHITE_SPACE_CHARS</name>
          <initializer>= 0b0001</initializer>
          <briefdescription>
<para>Do not skip whitespace characters. They are included in the <ref refid="structm0st4fa_1_1lexana_1_1_token" kindref="compound">Token</ref> object as part of the lexeme/name. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacem0st4fa_1_1lexana_1a9a9d1a058e5b31ba3d8a79f0646cc1eba77875afba3067542c2c1b1cd0e09b965" prot="public">
          <name>LAF_ALLOW_ONLY_NEW_LINE</name>
          <initializer>= 0b0010</initializer>
          <briefdescription>
<para>Skip other characters except &quot;new line&quot; (does not allow other whitespace characters). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacem0st4fa_1_1lexana_1a9a9d1a058e5b31ba3d8a79f0646cc1eba6a0611418b9f77b0f6ae06ba41fbcfbd" prot="public">
          <name>LAF_COUNT</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>The number of flags. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The <ref refid="classm0st4fa_1_1lexana_1_1_lexical_analyzer" kindref="compound">LexicalAnalyzer</ref> flags that control its behavior. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lexana/LADataStructs.h" line="14" column="1" bodyfile="include/lexana/LADataStructs.h" bodystart="14" bodyend="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacem0st4fa_1_1lexana_1a025d151548b0a8f909c849034ae50b7d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename TokenT</type>
          </param>
          <param>
            <type>typename InputT</type>
            <defval>std::string_view</defval>
          </param>
        </templateparamlist>
        <type>std::function&lt; TokenT(m0st4fa::fsm::FSMStateType, InputT)&gt;</type>
        <definition>using m0st4fa::lexana::TokenFactoryType = typedef std::function&lt;TokenT(m0st4fa::fsm::FSMStateType, InputT)&gt;</definition>
        <argsstring></argsstring>
        <name>TokenFactoryType</name>
        <qualifiedname>m0st4fa::lexana::TokenFactoryType</qualifiedname>
        <briefdescription>
<para>Aliases the type of a factory function that creates tokens based on FSM states and lexeme input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TokenT</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a token object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InputT</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of input (lexemes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lexana/LADataStructs.h" line="107" column="1" bodyfile="include/lexana/LADataStructs.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacem0st4fa_1_1lexana_1a5130a88f30b34e251b294ea69ecdae91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TerminalT</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; m0st4fa::lexana::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const lexana::Token&lt; TerminalT &gt; &amp;token)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>m0st4fa::lexana::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structm0st4fa_1_1lexana_1_1_token" kindref="compound">lexana::Token</ref>&lt; TerminalT &gt; &amp;</type>
          <declname>token</declname>
        </param>
    <requiresclause>requires (TerminalT a) { toString(a); }    </requiresclause>
        <briefdescription>
<para>Writes a <ref refid="structm0st4fa_1_1lexana_1_1_token" kindref="compound">Token</ref> object to a standard stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream to which the <ref refid="structm0st4fa_1_1lexana_1_1_token" kindref="compound">Token</ref> object will be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structm0st4fa_1_1lexana_1_1_token" kindref="compound">Token</ref> object to be written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the standard stream given as input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lexana/LADataStructs.h" line="96" column="1" bodyfile="include/lexana/LADataStructs.h" bodystart="96" bodyend="98"/>
        <references refid="structm0st4fa_1_1lexana_1_1_token_1a03050543e301ace90c5bcb0363432832" compoundref="_l_a_data_structs_8h" startline="76" endline="78">m0st4fa::lexana::Token&lt; TerminalT, AttrT &gt;::toString</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/lexana/LADataStructs.h" line="9" column="1"/>
  </compounddef>
</doxygen>
